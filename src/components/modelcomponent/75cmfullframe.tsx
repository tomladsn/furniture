/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public\75cmframefull.glb --output src\components\modelcomponent\75cmfullframe --types --keepnames --meta 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, Html  } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
type GLTFAction = any;
type GLTFResult = GLTF & {
  nodes: {
    frame: THREE.Mesh
    drawer6: THREE.Mesh
    drawer5: THREE.Mesh
    drawer4: THREE.Mesh
    drawer3: THREE.Mesh
    drawer2: THREE.Mesh
    drawer1: THREE.Mesh
    shelve1: THREE.Mesh
    shelve2: THREE.Mesh
    shelve3: THREE.Mesh
    shelve4: THREE.Mesh
    shelve5: THREE.Mesh
  }
  materials: {
    frame: THREE.MeshStandardMaterial
    drawer6: THREE.MeshStandardMaterial
    drawer5: THREE.MeshStandardMaterial
    drawer4: THREE.MeshStandardMaterial
    drawer3: THREE.MeshStandardMaterial
    drawer2: THREE.MeshStandardMaterial
    drawer1: THREE.MeshStandardMaterial
    shelve1: THREE.MeshStandardMaterial
    shelve2: THREE.MeshStandardMaterial
    shelve3: THREE.MeshStandardMaterial
    shelve4: THREE.MeshStandardMaterial
    shelve5: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Mediumframe({visible2component, ...props }: { visible2component: 'shelves' | 'drawers' | null } & JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/75cmframefull.glb') as GLTFResult
  const bbox = new THREE.Box3().setFromObject(nodes.frame);
  const size = bbox.getSize(new THREE.Vector3());
  const whiteMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF });
  return (
    <group {...props} dispose={null} position={[-1.6, -0.46, 0.95]} scale={[0.12, 0.14, 0.13]}>
      <mesh name="frame" geometry={nodes.frame.geometry} material={whiteMaterial} position={[-3.079, 13.984, 0.565]} scale={[0.019, 0.017, 0.019]} userData={{ name: 'frame' }} />
      {false && ( <> <mesh name="drawer6" geometry={nodes.drawer6.geometry} material={materials.drawer6} position={[-3.12, 0.417, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer6' }} />
      <mesh name="drawer5" geometry={nodes.drawer5.geometry} material={materials.drawer5} position={[-3.12, 5.563, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer5' }} />
      <mesh name="drawer4" geometry={nodes.drawer4.geometry} material={materials.drawer4} position={[-3.12, 10.622, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer4' }} />
      <mesh name="drawer3" geometry={nodes.drawer3.geometry} material={materials.drawer3} position={[-3.12, 15.556, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer3' }} />
      <mesh name="drawer2" geometry={nodes.drawer2.geometry} material={materials.drawer2} position={[-3.12, 20.612, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer2' }} />
      <mesh name="drawer1" geometry={nodes.drawer1.geometry} material={materials.drawer1} position={[-3.12, 25.743, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer1' }} /></>)}
      {visible2component === 'drawers' && (
        <>
        <mesh name="shelve1" geometry={nodes.shelve1.geometry} material={materials.shelve1} position={[-3.133, 24.133, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve1' }} />
      <mesh name="shelve2" geometry={nodes.shelve2.geometry} material={materials.shelve2} position={[-3.133, 18.947, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve2' }} />
      <mesh name="shelve3" geometry={nodes.shelve3.geometry} material={materials.shelve3} position={[-3.133, 13.932, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve3' }} />
      
         <mesh name="drawer5" geometry={nodes.drawer5.geometry} material={materials.drawer5} position={[-3.12, 0.563, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer5' }} />
         <mesh name="shelve5" geometry={nodes.shelve5.geometry} material={materials.shelve5} position={[-3.133, 3.989, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve5' }} />
         <mesh name="drawer4" geometry={nodes.drawer4.geometry} material={materials.drawer4} position={[-3.12, 5.622, 3.273]} rotation={[Math.PI / 2, 0, 0]} scale={[0.152, 0.131, 0.123]} userData={{ name: 'drawer4' }} />
         <mesh name="shelve4" geometry={nodes.shelve4.geometry} material={materials.shelve4} position={[-3.133, 9.011, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve4' }} />  
                </>
      )}
     
      {visible2component === 'shelves' && (
    <>
      <mesh name="shelve1" geometry={nodes.shelve1.geometry} material={materials.shelve1} position={[-3.133, 24.133, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve1' }} />
      <mesh name="shelve2" geometry={nodes.shelve2.geometry} material={materials.shelve2} position={[-3.133, 18.947, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve2' }} />
      <mesh name="shelve3" geometry={nodes.shelve3.geometry} material={materials.shelve3} position={[-3.133, 13.932, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve3' }} />
      <mesh name="shelve4" geometry={nodes.shelve4.geometry} material={materials.shelve4} position={[-3.133, 9.011, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve4' }} />
      <mesh name="shelve5" geometry={nodes.shelve5.geometry} material={materials.shelve5} position={[-3.133, 3.989, 0.541]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-6.938, -0.196, -5.481]} userData={{ name: 'shelve5' }} />
      </>
  )}
   <Html position={[size.x / 2, size.y, 0]} center>
          <div style={{ background: 'white', padding: '2px', borderRadius: '3px', fontSize: '12px' }}>
            {`Width: ${size.x.toFixed(2)}m`}
          </div>
        </Html>
        <Html position={[0, size.y / 2, size.z / 2]} center>
          <div style={{ background: 'white', padding: '2px', borderRadius: '3px', fontSize: '12px' }}>
            {`Height: ${size.y.toFixed(2)}m`}
          </div>
        </Html>
        <Html position={[0, size.y, size.z / 2]} center>
          <div style={{ background: 'white', padding: '2px', borderRadius: '3px', fontSize: '12px' }}>
            {`Depth: ${size.z.toFixed(2)}m`}
          </div>
        </Html>
    </group>
  )
}

useGLTF.preload('/75cmframefull.glb')
export default Mediumframe;